<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Hello World</title>
    <url>/2025/03/04/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
  </entry>
  <entry>
    <title>Goal</title>
    <url>/2025/03/05/Goal/</url>
    <content><![CDATA[<h2 id="My-Goals"><a href="#My-Goals" class="headerlink" title="My Goals"></a>My Goals</h2><p>Currently I’m studying in Xv Yong’s group, and learning DFT calculation and machine learning. I hope I can learn more about condensed matter physics and machine learning in the future.</p>
]]></content>
  </entry>
  <entry>
    <title>My First Post</title>
    <url>/2025/03/04/My-First-Post/</url>
    <content><![CDATA[<h2 id="Hi！This-is-my-first-post"><a href="#Hi！This-is-my-first-post" class="headerlink" title="Hi！This is my first post!"></a>Hi！This is my first post!</h2><p>This is my first time to create a blog, and I can’t wait to write more articles in the future. The original goal is to record my learning process, and inspire myself by tracing what I have achieved. Hope I can be better in the future.</p>
<h2 id="For-Visitors"><a href="#For-Visitors" class="headerlink" title="For Visitors"></a>For Visitors</h2><p>Thank you for visiting my blog! Hope you will find my posts interesting and helpful. If you have any questions or suggestions, please feel free to leave a comment or contact me. I look forward to hearing from you!</p>
<h2 id="Very-Important"><a href="#Very-Important" class="headerlink" title="Very Important"></a>Very Important</h2><p>I love shorekeeper.</p>
]]></content>
  </entry>
  <entry>
    <title>Tools</title>
    <url>/2025/03/06/Tools/</url>
    <content><![CDATA[<h2 id="Here-are-some-useful-links-for-post-writing-tricks"><a href="#Here-are-some-useful-links-for-post-writing-tricks" class="headerlink" title="Here are some useful links for post writing tricks"></a>Here are some useful links for post writing tricks</h2><ol>
<li><a href="https://hexo.io/zh-cn/docs/tag-plugins">tags</a> provides grammar for code blocks, citing, quotes, etc.</li>
<li><a href="https://link.hhtjim.com/">hhtjim</a> provides a outside music link for music players.</li>
<li>The format of picture insertion is as follows: <img src="/images/image.png">, and the picture is placed in the ..&#x2F;images folder.</li>
</ol>
]]></content>
  </entry>
  <entry>
    <title>vtuber</title>
    <url>/2025/03/11/vtuber/</url>
    <content><![CDATA[<h2 id="OpenLLM-Vtuber"><a href="#OpenLLM-Vtuber" class="headerlink" title="OpenLLM-Vtuber"></a>OpenLLM-Vtuber</h2><p>I’d like to create an avatar of Shorekeeper using the github Item “OpenLLM-Vtuber”. This blog is to trace my progress.</p>
<h2 id="2025-3-11"><a href="#2025-3-11" class="headerlink" title="2025&#x2F;3&#x2F;11"></a>2025&#x2F;3&#x2F;11</h2><p>I cloned the repository and ran the code. Using my deepseek API from “火山方舟”, I successed in starting basic communication on local server with suiku, the default avatar in the Item. I gave her the prompt of shorekeeper.</p>
<p><img src="/images/image.png"></p>
<p>Future plans:</p>
<ul>
<li><input checked="" disabled="" type="checkbox"> Create a new avatar of shorekeeper using Live2D. But it’s quite “Art”, maybe hard for a programmer like me to do it.</li>
<li><input disabled="" type="checkbox"> Replace the default AudioEngine with my own. I think it’s possible, but I need to learn more about the AudioEngine.</li>
<li><input disabled="" type="checkbox"> Use my local deepseek-r1-distill-Qwen-14B to run the avatar. Whether she will be smarter or not remains to be seen.</li>
</ul>
<h2 id="2025-3-14"><a href="#2025-3-14" class="headerlink" title="2025&#x2F;3&#x2F;14"></a>2025&#x2F;3&#x2F;14</h2><p>I found a great AI audio creater <a href="https://gsv.acgnai.top/">GPT-Sovits</a>. I generated an example:</p>
<audio controls>
  <source src="./vtuber/shorekeeper.mp3" type="audio/mpeg">
</audio>

<h2 id="2025-4-21"><a href="#2025-4-21" class="headerlink" title="2025&#x2F;4&#x2F;21"></a>2025&#x2F;4&#x2F;21</h2><p>I returned to the Item after a long time. This time I realized using the live2d model of 秧秧 instead of the default one. I also used a prompt of “Queen”. See here:<br><img src="/images/1745545848849.png" alt="1745545848849"></p>
<p>next step:</p>
<ul>
<li><input disabled="" type="checkbox"> Use my local deepseek-r1-distill-Qwen-14B to run the avatar.</li>
<li><input disabled="" type="checkbox"> Find a well-drowned avatar.</li>
<li><input disabled="" type="checkbox"> Replace the audio engin.</li>
</ul>
]]></content>
      <categories>
        <category>interest</category>
        <category>LLM</category>
        <category>AI</category>
      </categories>
      <tags>
        <tag>vtuber</tag>
        <tag>shorekeeper</tag>
        <tag>interest</tag>
      </tags>
  </entry>
  <entry>
    <title>DFT</title>
    <url>/2025/03/11/DFT/</url>
    <content><![CDATA[<h2 id="DFT-learning-note"><a href="#DFT-learning-note" class="headerlink" title="DFT learning note"></a>DFT learning note</h2><p>2025&#x2F;3&#x2F;11<br>Always leave some note when learning. This will be my everyday learning note about DFT.</p>
]]></content>
      <categories>
        <category>Physics</category>
        <category>Commputing Science</category>
      </categories>
      <tags>
        <tag>DFT</tag>
        <tag>Physics</tag>
        <tag>Quantum</tag>
      </tags>
  </entry>
  <entry>
    <title>HPC</title>
    <url>/2025/03/12/HPC/</url>
    <content><![CDATA[<h2 id="High-Performance-Computing"><a href="#High-Performance-Computing" class="headerlink" title="High Performance Computing"></a>High Performance Computing</h2><h3 id="3-26"><a href="#3-26" class="headerlink" title="3&#x2F;26"></a>3&#x2F;26</h3><p>Ring_Allreduce：define a MPI_Allreduce using Ring arithmetic</p>
<p>The code is as follows:</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;chrono&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;mpi.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;time.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> EPS 1e-5</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> ch = std::chrono;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Ring_Allreduce</span><span class="params">(<span class="type">void</span>* sendbuf, <span class="type">void</span>* recvbuf, <span class="type">int</span> n, MPI_Comm comm, <span class="type">int</span> comm_sz, <span class="type">int</span> my_rank)</span></span></span><br><span class="line"><span class="function"></span>&#123;   </span><br><span class="line">    <span class="type">int</span> chunk = (n + comm_sz - <span class="number">1</span>) / comm_sz;</span><br><span class="line">    <span class="type">int</span> last_chunk = n - (comm_sz<span class="number">-1</span>)*chunk;</span><br><span class="line">    <span class="type">int</span> total_bytes = n * <span class="built_in">sizeof</span>(<span class="type">float</span>);</span><br><span class="line">    <span class="type">float</span>* sendbuf_float = (<span class="type">float</span>*)sendbuf;</span><br><span class="line">    <span class="type">float</span>* recvbuf_float = (<span class="type">float</span>*)recvbuf;</span><br><span class="line">    <span class="type">float</span>* tmpbuf_float = (<span class="type">float</span>*)<span class="built_in">malloc</span>(total_bytes);</span><br><span class="line">    <span class="built_in">memcpy</span>(recvbuf, sendbuf, total_bytes);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; comm_sz - <span class="number">1</span>; ++i)&#123;</span><br><span class="line"></span><br><span class="line">        MPI_Request send_req,recv_req;</span><br><span class="line">        <span class="keyword">if</span> ((my_rank - i + comm_sz) % comm_sz == comm_sz - <span class="number">1</span>)&#123;</span><br><span class="line">            <span class="built_in">MPI_Isend</span>(recvbuf_float + (my_rank - i + comm_sz) % comm_sz *chunk, last_chunk, MPI_FLOAT, (my_rank + <span class="number">1</span>) % comm_sz, <span class="number">0</span>, comm,&amp;send_req);</span><br><span class="line">            <span class="built_in">MPI_Irecv</span>(tmpbuf_float+(my_rank - <span class="number">1</span> +comm_sz - i) % comm_sz *chunk, chunk, MPI_FLOAT, (my_rank - <span class="number">1</span> + comm_sz) % comm_sz, <span class="number">0</span>, comm,&amp;recv_req);</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span> ((my_rank <span class="number">-1</span> + comm_sz - i) % comm_sz == comm_sz <span class="number">-1</span>)&#123;</span><br><span class="line">            <span class="comment">// last_chunk = n - (comm_sz-1)*chunk;</span></span><br><span class="line">            <span class="built_in">MPI_Isend</span>(recvbuf_float + (my_rank - i + comm_sz) % comm_sz *chunk, chunk, MPI_FLOAT, (my_rank + <span class="number">1</span>) % comm_sz, <span class="number">0</span>, comm,&amp;send_req);</span><br><span class="line">            <span class="built_in">MPI_Irecv</span>(tmpbuf_float+(my_rank - <span class="number">1</span> +comm_sz - i) % comm_sz *chunk, last_chunk, MPI_FLOAT, (my_rank - <span class="number">1</span> + comm_sz) % comm_sz, <span class="number">0</span>, comm,&amp;recv_req);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="built_in">MPI_Isend</span>(recvbuf_float + (my_rank - i + comm_sz) % comm_sz *chunk , chunk, MPI_FLOAT, (my_rank + <span class="number">1</span>) % comm_sz, <span class="number">0</span>, comm,&amp;send_req);</span><br><span class="line">            <span class="built_in">MPI_Irecv</span>(tmpbuf_float+(my_rank - <span class="number">1</span> +comm_sz - i) % comm_sz *chunk , chunk, MPI_FLOAT, (my_rank - <span class="number">1</span> + comm_sz) % comm_sz, <span class="number">0</span>, comm,&amp;recv_req);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">MPI_Wait</span>(&amp;send_req, MPI_STATUS_IGNORE);</span><br><span class="line">        <span class="built_in">MPI_Wait</span>(&amp;recv_req, MPI_STATUS_IGNORE);</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> special_chunk = chunk;</span><br><span class="line">        <span class="keyword">if</span> ((my_rank <span class="number">-1</span> + comm_sz - i) % comm_sz == comm_sz <span class="number">-1</span>)&#123;</span><br><span class="line">            special_chunk = last_chunk;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; special_chunk; ++j)&#123;</span><br><span class="line">            recvbuf_float[j+(my_rank - <span class="number">1</span> +comm_sz - i) % comm_sz*chunk] += tmpbuf_float[j + (my_rank - <span class="number">1</span> -i + comm_sz) % comm_sz*chunk];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;  </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; comm_sz<span class="number">-1</span>; ++i)&#123;</span><br><span class="line">        MPI_Request send_req,recv_req;</span><br><span class="line">        <span class="type">int</span> source_chunk = (my_rank + <span class="number">1</span> - i + comm_sz) % comm_sz; </span><br><span class="line">        <span class="type">int</span> dest_chunk = (my_rank - i + comm_sz) % comm_sz;</span><br><span class="line">        <span class="keyword">if</span> (source_chunk == comm_sz - <span class="number">1</span>)&#123;</span><br><span class="line">            <span class="built_in">MPI_Isend</span>(recvbuf_float + source_chunk*chunk, last_chunk, MPI_FLOAT, (my_rank + <span class="number">1</span>) % comm_sz, <span class="number">0</span>, comm,&amp;send_req);</span><br><span class="line">            <span class="built_in">MPI_Irecv</span>(recvbuf_float + dest_chunk*chunk, chunk, MPI_FLOAT, (my_rank - <span class="number">1</span> + comm_sz) % comm_sz, <span class="number">0</span>, comm,&amp;recv_req);</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span> (dest_chunk == comm_sz - <span class="number">1</span>)&#123;</span><br><span class="line">            <span class="built_in">MPI_Isend</span>(recvbuf_float + source_chunk*chunk, chunk, MPI_FLOAT, (my_rank + <span class="number">1</span>) % comm_sz, <span class="number">0</span>, comm,&amp;send_req);</span><br><span class="line">            <span class="built_in">MPI_Irecv</span>(recvbuf_float + dest_chunk*chunk,last_chunk, MPI_FLOAT, (my_rank - <span class="number">1</span> + comm_sz) % comm_sz, <span class="number">0</span>, comm,&amp;recv_req);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="built_in">MPI_Isend</span>(recvbuf_float + source_chunk*chunk, chunk, MPI_FLOAT, (my_rank + <span class="number">1</span>) % comm_sz, <span class="number">0</span>, comm,&amp;send_req);</span><br><span class="line">            <span class="built_in">MPI_Irecv</span>(recvbuf_float + dest_chunk*chunk, chunk, MPI_FLOAT, (my_rank - <span class="number">1</span> + comm_sz) % comm_sz, <span class="number">0</span>, comm,&amp;recv_req);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">MPI_Wait</span>(&amp;send_req, MPI_STATUS_IGNORE);</span><br><span class="line">        <span class="built_in">MPI_Wait</span>(&amp;recv_req, MPI_STATUS_IGNORE);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">free</span>(tmpbuf_float);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// reduce + bcast</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Naive_Allreduce</span><span class="params">(<span class="type">void</span>* sendbuf, <span class="type">void</span>* recvbuf, <span class="type">int</span> n, MPI_Comm comm, <span class="type">int</span> comm_sz, <span class="type">int</span> my_rank)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">MPI_Reduce</span>(sendbuf, recvbuf, n, MPI_FLOAT, MPI_SUM, <span class="number">0</span>, comm);</span><br><span class="line">    <span class="built_in">MPI_Bcast</span>(recvbuf, n, MPI_FLOAT, <span class="number">0</span>, comm);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> ITER = <span class="built_in">atoi</span>(argv[<span class="number">1</span>]);</span><br><span class="line">    <span class="type">int</span> n = <span class="built_in">atoi</span>(argv[<span class="number">2</span>]);</span><br><span class="line">    <span class="type">float</span>* mpi_sendbuf = <span class="keyword">new</span> <span class="type">float</span>[n];</span><br><span class="line">    <span class="type">float</span>* mpi_recvbuf = <span class="keyword">new</span> <span class="type">float</span>[n];</span><br><span class="line">    <span class="type">float</span>* naive_sendbuf = <span class="keyword">new</span> <span class="type">float</span>[n];</span><br><span class="line">    <span class="type">float</span>* naive_recvbuf = <span class="keyword">new</span> <span class="type">float</span>[n];</span><br><span class="line">    <span class="type">float</span>* ring_sendbuf = <span class="keyword">new</span> <span class="type">float</span>[n];</span><br><span class="line">    <span class="type">float</span>* ring_recvbuf = <span class="keyword">new</span> <span class="type">float</span>[n];</span><br><span class="line"></span><br><span class="line">    <span class="built_in">MPI_Init</span>(<span class="literal">nullptr</span>, <span class="literal">nullptr</span>);</span><br><span class="line">    <span class="type">int</span> comm_sz;</span><br><span class="line">    <span class="type">int</span> my_rank;</span><br><span class="line">    <span class="built_in">MPI_Comm_size</span>(MPI_COMM_WORLD, &amp;comm_sz);</span><br><span class="line">    <span class="built_in">MPI_Comm_rank</span>(MPI_COMM_WORLD, &amp;my_rank);</span><br><span class="line">  </span><br><span class="line">    <span class="built_in">srand</span>(<span class="built_in">time</span>(<span class="literal">NULL</span>) + my_rank);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; ++i)</span><br><span class="line">        mpi_sendbuf[i] = <span class="keyword">static_cast</span> &lt;<span class="type">float</span>&gt; (<span class="built_in">rand</span>()) / <span class="keyword">static_cast</span> &lt;<span class="type">float</span>&gt; (RAND_MAX);</span><br><span class="line">    <span class="built_in">memcpy</span>(naive_sendbuf, mpi_sendbuf, n * <span class="built_in">sizeof</span>(<span class="type">float</span>));</span><br><span class="line">    <span class="built_in">memcpy</span>(ring_sendbuf, mpi_sendbuf, n * <span class="built_in">sizeof</span>(<span class="type">float</span>));</span><br><span class="line"></span><br><span class="line">    <span class="comment">//warmup and check</span></span><br><span class="line">    <span class="built_in">MPI_Allreduce</span>(mpi_sendbuf, mpi_recvbuf, n, MPI_FLOAT, MPI_SUM, MPI_COMM_WORLD);</span><br><span class="line">    <span class="built_in">Naive_Allreduce</span>(naive_sendbuf, naive_recvbuf, n, MPI_COMM_WORLD, comm_sz, my_rank);</span><br><span class="line">    <span class="built_in">Ring_Allreduce</span>(ring_sendbuf, ring_recvbuf, n, MPI_COMM_WORLD, comm_sz, my_rank);</span><br><span class="line">    <span class="type">bool</span> correct = <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; ++i)</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">abs</span>(mpi_recvbuf[i] - ring_recvbuf[i]) &gt; EPS)</span><br><span class="line">        &#123;   </span><br><span class="line">            correct = <span class="literal">false</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (correct)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">auto</span> beg = ch::high_resolution_clock::<span class="built_in">now</span>();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> iter = <span class="number">0</span>; iter &lt; ITER; ++iter)</span><br><span class="line">            <span class="built_in">MPI_Allreduce</span>(mpi_sendbuf, mpi_recvbuf, n, MPI_FLOAT, MPI_SUM, MPI_COMM_WORLD);</span><br><span class="line">        <span class="keyword">auto</span> end = ch::high_resolution_clock::<span class="built_in">now</span>();</span><br><span class="line">        <span class="type">double</span> mpi_dur = ch::duration_cast&lt;ch::duration&lt;<span class="type">double</span>&gt;&gt;(end - beg).<span class="built_in">count</span>() * <span class="number">1000</span>; <span class="comment">//ms</span></span><br><span class="line"></span><br><span class="line">        beg = ch::high_resolution_clock::<span class="built_in">now</span>();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> iter = <span class="number">0</span>; iter &lt; ITER; ++iter)</span><br><span class="line">            <span class="built_in">Naive_Allreduce</span>(naive_sendbuf, naive_recvbuf, n, MPI_COMM_WORLD, comm_sz, my_rank);</span><br><span class="line">        end = ch::high_resolution_clock::<span class="built_in">now</span>();</span><br><span class="line">        <span class="type">double</span> naive_dur = ch::duration_cast&lt;ch::duration&lt;<span class="type">double</span>&gt;&gt;(end - beg).<span class="built_in">count</span>() * <span class="number">1000</span>; <span class="comment">//ms</span></span><br><span class="line"></span><br><span class="line">        beg = ch::high_resolution_clock::<span class="built_in">now</span>();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> iter = <span class="number">0</span>; iter &lt; ITER; ++iter)</span><br><span class="line">            <span class="built_in">Ring_Allreduce</span>(ring_sendbuf, ring_recvbuf, n, MPI_COMM_WORLD, comm_sz, my_rank);</span><br><span class="line">        end = ch::high_resolution_clock::<span class="built_in">now</span>();</span><br><span class="line">        <span class="type">double</span> ring_dur = ch::duration_cast&lt;ch::duration&lt;<span class="type">double</span>&gt;&gt;(end - beg).<span class="built_in">count</span>() * <span class="number">1000</span>; <span class="comment">//ms</span></span><br><span class="line">      </span><br><span class="line">        <span class="keyword">if</span> (my_rank == <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            std::cout &lt;&lt; <span class="string">&quot;Correct.&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">            std::cout &lt;&lt; <span class="string">&quot;MPI_Allreduce:   &quot;</span> &lt;&lt; mpi_dur &lt;&lt; <span class="string">&quot; ms.&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">            std::cout &lt;&lt; <span class="string">&quot;Naive_Allreduce: &quot;</span> &lt;&lt; naive_dur &lt;&lt; <span class="string">&quot; ms.&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">            std::cout &lt;&lt; <span class="string">&quot;Ring_Allreduce:  &quot;</span> &lt;&lt; ring_dur &lt;&lt; <span class="string">&quot; ms.&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">if</span> (my_rank == <span class="number">0</span>)</span><br><span class="line">            std::cout &lt;&lt; <span class="string">&quot;Wrong!&quot;</span> &lt;&lt; std::endl;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">delete</span>[] mpi_sendbuf;</span><br><span class="line">    <span class="keyword">delete</span>[] mpi_recvbuf;</span><br><span class="line">    <span class="keyword">delete</span>[] naive_sendbuf;</span><br><span class="line">    <span class="keyword">delete</span>[] naive_recvbuf;</span><br><span class="line">    <span class="keyword">delete</span>[] ring_sendbuf;</span><br><span class="line">    <span class="keyword">delete</span>[] ring_recvbuf;</span><br><span class="line">    <span class="built_in">MPI_Finalize</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>HPC</category>
        <category>C.S.</category>
      </categories>
      <tags>
        <tag>HPC</tag>
        <tag>C.S.</tag>
      </tags>
  </entry>
  <entry>
    <title>TCP</title>
    <url>/2025/03/31/TCP/</url>
    <content><![CDATA[<h2 id="TCP-chatroom"><a href="#TCP-chatroom" class="headerlink" title="TCP chatroom"></a>TCP chatroom</h2><p>This is the first assignment of “Computer Network: a top- down approach” course. It’s a simple TCP chatroom. The server can accept multiple clients and exchange messages and files with them. The server and client are implemented by python.</p>
<h2 id="Socket-Programming-Lab-Report"><a href="#Socket-Programming-Lab-Report" class="headerlink" title="Socket Programming Lab Report"></a>Socket Programming Lab Report</h2><p><strong>Name:</strong> Bao<br><strong>Student ID:</strong> xxxxxxxxxx<br><strong>Date:</strong> 29&#x2F;03</p>
<hr>
<h3 id="1-Experiment-Objectives"><a href="#1-Experiment-Objectives" class="headerlink" title="1.Experiment Objectives"></a>1.Experiment Objectives</h3><ul>
<li>To understand the basics of socket programming</li>
<li>To implement server-client architecture using TCP protocol.</li>
<li>To implement multi-thread server using TCP protocol.</li>
</ul>
<h3 id="2-Experimental-Environment"><a href="#2-Experimental-Environment" class="headerlink" title="2.Experimental Environment"></a>2.Experimental Environment</h3><ul>
<li><strong>Programming Language:</strong> Python 3.12.4</li>
<li><strong>Libraries:</strong> socket and threading module in python</li>
<li><strong>Tool:</strong> Wireshake for packet capture</li>
</ul>
<h3 id="Usage"><a href="#Usage" class="headerlink" title="Usage"></a>Usage</h3><p>For single thread TCP part,</p>
<h5 id="Server"><a href="#Server" class="headerlink" title="Server"></a>Server</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> ./TCP/</span><br><span class="line">python server.py 18080 input</span><br></pre></td></tr></table></figure>

<p>Options:</p>
<ul>
<li><code>18080</code>: Server listening port (default:18080)</li>
<li><code>input</code>: Server response type (default:upper), including “input” and “upper”</li>
</ul>
<h5 id="Client"><a href="#Client" class="headerlink" title="Client"></a>Client</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> ./TCP</span><br><span class="line">python client.py 127.0.0.1 18080</span><br></pre></td></tr></table></figure>

<p>Options:</p>
<ul>
<li><code>127.0.0.1</code> server IP to connect to (default:127.0.0.1)</li>
<li><code>18080</code> server port to connect to (default:18080)</li>
</ul>
<p>For multiple thread TCP server part</p>
<h5 id="Server-1"><a href="#Server-1" class="headerlink" title="Server"></a>Server</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> ./Threading/</span><br><span class="line">python server.py 18080 upper 10</span><br></pre></td></tr></table></figure>

<p>Options:</p>
<ul>
<li><code>18080</code>: Server listening port (default:18080)</li>
<li><code>10</code>: the maximum number of clients the server can accept (default:10)</li>
<li><code>upper</code>: Server response mode (default:upper), including “input” and “upper”</li>
</ul>
<h5 id="Client-1"><a href="#Client-1" class="headerlink" title="Client"></a>Client</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> ./Threading/</span><br><span class="line">python client.py client0 127.0.0.1 18080</span><br></pre></td></tr></table></figure>

<p>And for a new client</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> ./Threading/</span><br><span class="line">python client.py client1 127.0.0.1 18080</span><br></pre></td></tr></table></figure>

<p>And so on…<br>Options:</p>
<ul>
<li><code>127.0.0.1</code> server IP to connect to (default:127.0.0.1)</li>
<li><code>18080</code> server port to connect to (default:18080)</li>
<li><code>client1</code> client name (default:client0), necessary for more than 1 clients, to separately manage the files different clients own.</li>
</ul>
<h4 id="Note"><a href="#Note" class="headerlink" title="Note:"></a>Note:</h4><ul>
<li>All above commands are executed in the root directory of the project, and you can run without any arguments to use the default values.</li>
<li>Server is set a time out limit of 120, which is not necessary. It’s just to easily quit the server when it’s not being used.</li>
<li>Client is set a time out limit of 30.</li>
</ul>
<p>After connection is set up, the client and server go in a circle of “receive - send”. User repeatedly give commands through client.<br>There are 3 types of input commands:</p>
<ul>
<li>ask for file:someFile :require server sending someFile to the folder client manages</li>
<li>send file:someFile :send local file someFile to folder “server” that server manages</li>
<li>exit :quit connction with server</li>
<li>else: send the input message encoded by ‘UTF-8’ to server, and receive reponse from server. The argument <code>responseType</code> in class TCP_Server&#x2F;Multithread_Server determines how server response. <code>responseType = upper</code> automatically return the total uppercase of client massage, <code>responseType = input</code> require server input response by hand.</li>
</ul>
<h3 id="3-Experimental-Procedure"><a href="#3-Experimental-Procedure" class="headerlink" title="3.Experimental Procedure"></a>3.Experimental Procedure</h3><p>Using Wireshake, we can capture the packets sent between client and server.<br>Because multi-thread version totally inludes functions of single thread version, I will only show the result of multi thread version here.<br>The following figures shows the example:<br><img src="/images/cmd.png" alt="cmd"><br>During the connection, the WireShark capture the packets sent between client and server.<br>When the connections are setup:<br><img src="/images/shark1.png" alt="capture"><br>When client0 exits and client1 is receiving shore.jpg from server:<br><img src="/images/shark2.png" alt="result"><br>I didn’t show the whole process because shore.jpg takes too many packets to be sent.</p>
<p>For more test, the .&#x2F;server&#x2F; has 出师表.txt, the .&#x2F;client has keep.jpg.</p>
<h3 id="4-Experiment-Analysis"><a href="#4-Experiment-Analysis" class="headerlink" title="4.Experiment Analysis"></a>4.Experiment Analysis</h3><p>It can be easily found that “3-way” hand shake happens. Looking at the wireshark captures, before the first request of port 9461 and the connection of port 9465, there are 3 packets sent between client and server:No.109,110,111. In 109, client0 sends a SYN packet to server, and in 110, server sends a SYN-ACK packet to client0, and in 111, client0 sends a ACK packet to server. After that, the connection is established. Of course, the same thing happens for client1, which is demonstrated in No.144,145,146.</p>
<h3 id="5-Experiment-Summary"><a href="#5-Experiment-Summary" class="headerlink" title="5.Experiment Summary"></a>5.Experiment Summary</h3><p>TCP can be visualized like the following picture:<br><img src="/./img/fig.png" alt="TCP"><br>With the experiment, we can better under stand why TCP is reliable.</p>
]]></content>
      <categories>
        <category>network</category>
        <category>C.S.</category>
      </categories>
      <tags>
        <tag>network</tag>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>Deeplearning</title>
    <url>/2025/06/18/ai/</url>
    <content><![CDATA[]]></content>
      <tags>
        <tag>cs</tag>
      </tags>
  </entry>
  <entry>
    <title>solution</title>
    <url>/2025/09/16/solution/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>DSA-LAB1</title>
    <url>/2025/09/16/DSA-LAB1/</url>
    <content><![CDATA[<!DOCTYPE html>
<html lang="zh-CN">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>矩阵子矩阵和计算 - C++代码展示</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <link href="https://cdn.jsdelivr.net/npm/font-awesome@4.7.0/css/font-awesome.min.css" rel="stylesheet">
    <script>
        tailwind.config = {
            theme: {
                extend: {
                    colors: {
                        primary: '#3B82F6',
                        secondary: '#10B981',
                        dark: '#1E293B',
                        light: '#F8FAFC',
                        accent: '#8B5CF6'
                    },
                    fontFamily: {
                        sans: ['Inter', 'system-ui', 'sans-serif'],
                        mono: ['Fira Code', 'monospace']
                    }
                }
            }
        }
    </script>
    <style type="text/tailwindcss">
        @layer utilities {
            .code-line {
                @apply py-0.5 px-4 text-sm;
            }
            .code-line:hover {
                @apply bg-dark/50;
            }
            .line-number {
                @apply text-gray-400 text-right pr-4 select-none;
            }
            .keyword {
                @apply text-blue-400;
            }
            .comment {
                @apply text-green-400;
            }
            .string {
                @apply text-yellow-300;
            }
            .function {
                @apply text-purple-300;
            }
            .variable {
                @apply text-cyan-300;
            }
            .number {
                @apply text-orange-300;
            }
        }
    </style>
</head>
<body class="bg-gray-50 text-gray-800 min-h-screen">
    <!-- 导航栏 -->
    <header class="bg-white shadow-sm sticky top-0 z-10">
        <div class="container mx-auto px-4 py-4 flex justify-between items-center">
            <div class="flex items-center space-x-2">
                <i class="fa fa-code text-primary text-2xl"></i>
                <h1 class="text-xl font-bold">C++ 代码展示</h1>
            </div>
            <nav>
                <ul class="flex space-x-6">
                    <li><a href="#code" class="hover:text-primary transition-colors"><i class="fa fa-file-code-o mr-1"></i>代码</a></li>
                    <li><a href="#explanation" class="hover:text-primary transition-colors"><i class="fa fa-book mr-1"></i>解释</a></li>
                    <li><a href="#features" class="hover:text-primary transition-colors"><i class="fa fa-list-ul mr-1"></i>功能</a></li>
                </ul>
            </nav>
        </div>
    </header>

<pre><code>&lt;!-- 主要内容 --&gt;
&lt;main class=&quot;container mx-auto px-4 py-8&quot;&gt;
    &lt;!-- 代码信息卡片 --&gt;
    &lt;div class=&quot;bg-white rounded-xl shadow-md p-6 mb-8 transform hover:shadow-lg transition-shadow&quot;&gt;
        &lt;div class=&quot;flex items-center mb-4&quot;&gt;
            &lt;div class=&quot;bg-primary/10 p-3 rounded-lg mr-4&quot;&gt;
                &lt;i class=&quot;fa fa-calculator text-primary text-2xl&quot;&gt;&lt;/i&gt;
            &lt;/div&gt;
            &lt;div&gt;
                &lt;h2 class=&quot;text-2xl font-bold mb-1&quot;&gt;矩阵子矩阵和计算&lt;/h2&gt;
                &lt;p class=&quot;text-gray-600&quot;&gt;高效计算二维矩阵中子矩阵元素之和的C++实现&lt;/p&gt;
            &lt;/div&gt;
        &lt;/div&gt;
        &lt;div class=&quot;flex flex-wrap gap-3&quot;&gt;
            &lt;span class=&quot;bg-blue-100 text-blue-800 text-xs px-3 py-1 rounded-full&quot;&gt;&lt;i class=&quot;fa fa-tag mr-1&quot;&gt;&lt;/i&gt;C++&lt;/span&gt;
            &lt;span class=&quot;bg-green-100 text-green-800 text-xs px-3 py-1 rounded-full&quot;&gt;&lt;i class=&quot;fa fa-cube mr-1&quot;&gt;&lt;/i&gt;矩阵运算&lt;/span&gt;
            &lt;span class=&quot;bg-purple-100 text-purple-800 text-xs px-3 py-1 rounded-full&quot;&gt;&lt;i class=&quot;fa fa-clock-o mr-1&quot;&gt;&lt;/i&gt;前缀和算法&lt;/span&gt;
            &lt;span class=&quot;bg-yellow-100 text-yellow-800 text-xs px-3 py-1 rounded-full&quot;&gt;&lt;i class=&quot;fa fa-tachometer mr-1&quot;&gt;&lt;/i&gt;高效计算&lt;/span&gt;
        &lt;/div&gt;
    &lt;/div&gt;

    &lt;!-- 代码展示区 --&gt;
    &lt;section id=&quot;code&quot; class=&quot;mb-12&quot;&gt;
        &lt;h2 class=&quot;text-2xl font-bold mb-6 flex items-center&quot;&gt;
            &lt;i class=&quot;fa fa-file-code-o text-primary mr-2&quot;&gt;&lt;/i&gt;代码展示
        &lt;/h2&gt;
        &lt;div class=&quot;bg-dark rounded-xl shadow-lg overflow-hidden&quot;&gt;
            &lt;!-- 代码工具栏 --&gt;
            &lt;div class=&quot;bg-gray-800 px-4 py-3 flex justify-between items-center&quot;&gt;
                &lt;div class=&quot;flex space-x-2&quot;&gt;
                    &lt;div class=&quot;w-3 h-3 rounded-full bg-red-500&quot;&gt;&lt;/div&gt;
                    &lt;div class=&quot;w-3 h-3 rounded-full bg-yellow-500&quot;&gt;&lt;/div&gt;
                    &lt;div class=&quot;w-3 h-3 rounded-full bg-green-500&quot;&gt;&lt;/div&gt;
                &lt;/div&gt;
                &lt;div class=&quot;text-gray-400 text-sm&quot;&gt;matrix_sum.cpp&lt;/div&gt;
                &lt;button id=&quot;copy-btn&quot; class=&quot;text-gray-400 hover:text-white transition-colors text-sm flex items-center&quot;&gt;
                    &lt;i class=&quot;fa fa-copy mr-1&quot;&gt;&lt;/i&gt;复制代码
                &lt;/button&gt;
            &lt;/div&gt;
            
            &lt;!-- 代码内容 --&gt;
            &lt;div class=&quot;flex overflow-x-auto&quot;&gt;
                &lt;!-- 行号 --&gt;
                &lt;div class=&quot;bg-gray-800 text-gray-400 px-2&quot;&gt;
                    &lt;div class=&quot;code-line&quot;&gt;1&lt;/div&gt;
                    &lt;div class=&quot;code-line&quot;&gt;2&lt;/div&gt;
                    &lt;div class=&quot;code-line&quot;&gt;3&lt;/div&gt;
                    &lt;div class=&quot;code-line&quot;&gt;4&lt;/div&gt;
                    &lt;div class=&quot;code-line&quot;&gt;5&lt;/div&gt;
                    &lt;div class=&quot;code-line&quot;&gt;6&lt;/div&gt;
                    &lt;div class=&quot;code-line&quot;&gt;7&lt;/div&gt;
                    &lt;div class=&quot;code-line&quot;&gt;8&lt;/div&gt;
                    &lt;div class=&quot;code-line&quot;&gt;9&lt;/div&gt;
                    &lt;div class=&quot;code-line&quot;&gt;10&lt;/div&gt;
                    &lt;div class=&quot;code-line&quot;&gt;11&lt;/div&gt;
                    &lt;div class=&quot;code-line&quot;&gt;12&lt;/div&gt;
                    &lt;div class=&quot;code-line&quot;&gt;13&lt;/div&gt;
                    &lt;div class=&quot;code-line&quot;&gt;14&lt;/div&gt;
                    &lt;div class=&quot;code-line&quot;&gt;15&lt;/div&gt;
                    &lt;div class=&quot;code-line&quot;&gt;16&lt;/div&gt;
                    &lt;div class=&quot;code-line&quot;&gt;17&lt;/div&gt;
                    &lt;div class=&quot;code-line&quot;&gt;18&lt;/div&gt;
                    &lt;div class=&quot;code-line&quot;&gt;19&lt;/div&gt;
                    &lt;div class=&quot;code-line&quot;&gt;20&lt;/div&gt;
                    &lt;div class=&quot;code-line&quot;&gt;21&lt;/div&gt;
                    &lt;div class=&quot;code-line&quot;&gt;22&lt;/div&gt;
                    &lt;div class=&quot;code-line&quot;&gt;23&lt;/div&gt;
                    &lt;div class=&quot;code-line&quot;&gt;24&lt;/div&gt;
                    &lt;div class=&quot;code-line&quot;&gt;25&lt;/div&gt;
                    &lt;div class=&quot;code-line&quot;&gt;26&lt;/div&gt;
                    &lt;div class=&quot;code-line&quot;&gt;27&lt;/div&gt;
                    &lt;div class=&quot;code-line&quot;&gt;28&lt;/div&gt;
                    &lt;div class=&quot;code-line&quot;&gt;29&lt;/div&gt;
                    &lt;div class=&quot;code-line&quot;&gt;30&lt;/div&gt;
                    &lt;div class=&quot;code-line&quot;&gt;31&lt;/div&gt;
                    &lt;div class=&quot;code-line&quot;&gt;32&lt;/div&gt;
                    &lt;div class=&quot;code-line&quot;&gt;33&lt;/div&gt;
                    &lt;div class=&quot;code-line&quot;&gt;34&lt;/div&gt;
                    &lt;div class=&quot;code-line&quot;&gt;35&lt;/div&gt;
                    &lt;div class=&quot;code-line&quot;&gt;36&lt;/div&gt;
                &lt;/div&gt;
                
                &lt;!-- 代码 --&gt;
                &lt;div class=&quot;font-mono text-gray-200 flex-1&quot; id=&quot;code-content&quot;&gt;
                    &lt;div class=&quot;code-line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;#include&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&amp;lt;cstdio&amp;gt;&lt;/span&gt;&lt;/div&gt;
                    &lt;div class=&quot;code-line&quot;&gt;&lt;/div&gt;
                    &lt;div class=&quot;code-line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// int matrix[2000][2000];&lt;/span&gt;&lt;/div&gt;
                    &lt;div class=&quot;code-line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;variable&quot;&gt;matrix&lt;/span&gt;[&lt;span class=&quot;number&quot;&gt;2001&lt;/span&gt;][&lt;span class=&quot;number&quot;&gt;2001&lt;/span&gt;];&lt;/div&gt;
                    &lt;div class=&quot;code-line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// int submetricsum[2000][2000];&lt;/span&gt;&lt;/div&gt;
                    &lt;div class=&quot;code-line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;long long&lt;/span&gt; &lt;span class=&quot;variable&quot;&gt;submetricsum&lt;/span&gt;[&lt;span class=&quot;number&quot;&gt;2001&lt;/span&gt;][&lt;span class=&quot;number&quot;&gt;2001&lt;/span&gt;];&lt;/div&gt;
                    &lt;div class=&quot;code-line&quot;&gt;&lt;/div&gt;
                    &lt;div class=&quot;code-line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;function&quot;&gt;main&lt;/span&gt;()&lt;/div&gt;
                    &lt;div class=&quot;code-line&quot;&gt;&#123;&lt;/div&gt;
                    &lt;div class=&quot;code-line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;variable&quot;&gt;n&lt;/span&gt;, &lt;span class=&quot;variable&quot;&gt;m&lt;/span&gt;, &lt;span class=&quot;variable&quot;&gt;q&lt;/span&gt;;&lt;/div&gt;
                    &lt;div class=&quot;code-line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;scanf&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;%d%d&quot;&lt;/span&gt;, &amp;amp;&lt;span class=&quot;variable&quot;&gt;n&lt;/span&gt;, &amp;amp;&lt;span class=&quot;variable&quot;&gt;m&lt;/span&gt;);&lt;/div&gt;
                    &lt;div class=&quot;code-line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;variable&quot;&gt;i&lt;/span&gt; = &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;; &lt;span class=&quot;variable&quot;&gt;i&lt;/span&gt; &amp;lt;= &lt;span class=&quot;variable&quot;&gt;n&lt;/span&gt;; ++&lt;span class=&quot;variable&quot;&gt;i&lt;/span&gt;) &#123;&lt;/div&gt;
                    &lt;div class=&quot;code-line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;variable&quot;&gt;j&lt;/span&gt; = &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;; &lt;span class=&quot;variable&quot;&gt;j&lt;/span&gt; &amp;lt;= &lt;span class=&quot;variable&quot;&gt;m&lt;/span&gt;; ++&lt;span class=&quot;variable&quot;&gt;j&lt;/span&gt;) &#123;&lt;/div&gt;
                    &lt;div class=&quot;code-line&quot;&gt;            &lt;span class=&quot;function&quot;&gt;scanf&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;%d&quot;&lt;/span&gt;, &amp;amp;&lt;span class=&quot;variable&quot;&gt;matrix&lt;/span&gt;[&lt;span class=&quot;variable&quot;&gt;i&lt;/span&gt;][&lt;span class=&quot;variable&quot;&gt;j&lt;/span&gt;]);&lt;/div&gt;
                    &lt;div class=&quot;code-line&quot;&gt;        &#125;&lt;/div&gt;
                    &lt;div class=&quot;code-line&quot;&gt;    &#125;&lt;/div&gt;
                    &lt;div class=&quot;code-line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;variable&quot;&gt;j&lt;/span&gt; = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; &lt;span class=&quot;variable&quot;&gt;j&lt;/span&gt; &amp;lt;= &lt;span class=&quot;variable&quot;&gt;m&lt;/span&gt;; ++&lt;span class=&quot;variable&quot;&gt;j&lt;/span&gt;) &#123;&lt;/div&gt;
                    &lt;div class=&quot;code-line&quot;&gt;        &lt;span class=&quot;variable&quot;&gt;submetricsum&lt;/span&gt;[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;][&lt;span class=&quot;variable&quot;&gt;j&lt;/span&gt;] = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/div&gt;
                    &lt;div class=&quot;code-line&quot;&gt;    &#125;&lt;/div&gt;
                    &lt;div class=&quot;code-line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;variable&quot;&gt;i&lt;/span&gt; = &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;; &lt;span class=&quot;variable&quot;&gt;i&lt;/span&gt; &amp;lt;= &lt;span class=&quot;variable&quot;&gt;n&lt;/span&gt;; ++&lt;span class=&quot;variable&quot;&gt;i&lt;/span&gt;) &#123;&lt;/div&gt;
                    &lt;div class=&quot;code-line&quot;&gt;        &lt;span class=&quot;variable&quot;&gt;submetricsum&lt;/span&gt;[&lt;span class=&quot;variable&quot;&gt;i&lt;/span&gt;][&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;] = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/div&gt;
                    &lt;div class=&quot;code-line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;variable&quot;&gt;j&lt;/span&gt; = &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;; &lt;span class=&quot;variable&quot;&gt;j&lt;/span&gt; &amp;lt;= &lt;span class=&quot;variable&quot;&gt;m&lt;/span&gt;; ++&lt;span class=&quot;variable&quot;&gt;j&lt;/span&gt;) &#123;&lt;/div&gt;
                    &lt;div class=&quot;code-line&quot;&gt;            &lt;span class=&quot;variable&quot;&gt;submetricsum&lt;/span&gt;[&lt;span class=&quot;variable&quot;&gt;i&lt;/span&gt;][&lt;span class=&quot;variable&quot;&gt;j&lt;/span&gt;] = &lt;span class=&quot;variable&quot;&gt;submetricsum&lt;/span&gt;[&lt;span class=&quot;variable&quot;&gt;i&lt;/span&gt;][&lt;span class=&quot;variable&quot;&gt;j&lt;/span&gt; - &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;] + &lt;span class=&quot;variable&quot;&gt;matrix&lt;/span&gt;[&lt;span class=&quot;variable&quot;&gt;i&lt;/span&gt;][&lt;span class=&quot;variable&quot;&gt;j&lt;/span&gt;] + &lt;span class=&quot;variable&quot;&gt;submetricsum&lt;/span&gt;[&lt;span class=&quot;variable&quot;&gt;i&lt;/span&gt;-&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;][&lt;span class=&quot;variable&quot;&gt;j&lt;/span&gt;] - &lt;span class=&quot;variable&quot;&gt;submetricsum&lt;/span&gt;[&lt;span class=&quot;variable&quot;&gt;i&lt;/span&gt;-&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;][&lt;span class=&quot;variable&quot;&gt;j&lt;/span&gt;-&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;];&lt;/div&gt;
                    &lt;div class=&quot;code-line&quot;&gt;        &#125;&lt;/div&gt;
                    &lt;div class=&quot;code-line&quot;&gt;    &#125;&lt;/div&gt;
                    &lt;div class=&quot;code-line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;scanf&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;%d&quot;&lt;/span&gt;, &amp;amp;&lt;span class=&quot;variable&quot;&gt;q&lt;/span&gt;);&lt;/div&gt;
                    &lt;div class=&quot;code-line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// int sum = 0;&lt;/span&gt;&lt;/div&gt;
                    &lt;div class=&quot;code-line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;variable&quot;&gt;x&lt;/span&gt;,&lt;span class=&quot;variable&quot;&gt;y&lt;/span&gt;,&lt;span class=&quot;variable&quot;&gt;a&lt;/span&gt;,&lt;span class=&quot;variable&quot;&gt;b&lt;/span&gt;;&lt;/div&gt;
                    &lt;div class=&quot;code-line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;variable&quot;&gt;i&lt;/span&gt; = &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;; &lt;span class=&quot;variable&quot;&gt;i&lt;/span&gt; &amp;lt;= &lt;span class=&quot;variable&quot;&gt;q&lt;/span&gt;; ++&lt;span class=&quot;variable&quot;&gt;i&lt;/span&gt;) &#123;&lt;/div&gt;
                    &lt;div class=&quot;code-line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;// int x, y, a, b;&lt;/span&gt;&lt;/div&gt;
                    &lt;div class=&quot;code-line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;long long&lt;/span&gt; &lt;span class=&quot;variable&quot;&gt;sum&lt;/span&gt; = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/div&gt;
                    &lt;div class=&quot;code-line&quot;&gt;        &lt;span class=&quot;function&quot;&gt;scanf&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;%d %d %d %d&quot;&lt;/span&gt;, &amp;amp;&lt;span class=&quot;variable&quot;&gt;x&lt;/span&gt;, &amp;amp;&lt;span class=&quot;variable&quot;&gt;y&lt;/span&gt;, &amp;amp;&lt;span class=&quot;variable&quot;&gt;a&lt;/span&gt;, &amp;amp;&lt;span class=&quot;variable&quot;&gt;b&lt;/span&gt;);&lt;/div&gt;
                    &lt;div class=&quot;code-line&quot;&gt;        &lt;span class=&quot;variable&quot;&gt;sum&lt;/span&gt; = &lt;span class=&quot;variable&quot;&gt;submetricsum&lt;/span&gt;[&lt;span class=&quot;variable&quot;&gt;x&lt;/span&gt;+&lt;span class=&quot;variable&quot;&gt;a&lt;/span&gt;-&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;][&lt;span class=&quot;variable&quot;&gt;y&lt;/span&gt;+&lt;span class=&quot;variable&quot;&gt;b&lt;/span&gt;-&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;] - &lt;span class=&quot;variable&quot;&gt;submetricsum&lt;/span&gt;[&lt;span class=&quot;variable&quot;&gt;x&lt;/span&gt;+&lt;span class=&quot;variable&quot;&gt;a&lt;/span&gt;-&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;][&lt;span class=&quot;variable&quot;&gt;y&lt;/span&gt;-&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;] - &lt;span class=&quot;variable&quot;&gt;submetricsum&lt;/span&gt;[&lt;span class=&quot;variable&quot;&gt;x&lt;/span&gt;-&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;][&lt;span class=&quot;variable&quot;&gt;y&lt;/span&gt;+&lt;span class=&quot;variable&quot;&gt;b&lt;/span&gt;-&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;] + &lt;span class=&quot;variable&quot;&gt;submetricsum&lt;/span&gt;[&lt;span class=&quot;variable&quot;&gt;x&lt;/span&gt;-&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;][&lt;span class=&quot;variable&quot;&gt;y&lt;/span&gt;-&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;];&lt;/div&gt;
                    &lt;div class=&quot;code-line&quot;&gt;        &lt;span class=&quot;function&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;%lld\n&quot;&lt;/span&gt;, &lt;span class=&quot;variable&quot;&gt;sum&lt;/span&gt;);&lt;/div&gt;
                    &lt;div class=&quot;code-line&quot;&gt;    &#125;&lt;/div&gt;
                    &lt;div class=&quot;code-line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/div&gt;
                    &lt;div class=&quot;code-line&quot;&gt;&#125;&lt;/div&gt;
                &lt;/div&gt;
            &lt;/div&gt;
        &lt;/div&gt;
    &lt;/section&gt;

    &lt;!-- 代码解释 --&gt;
    &lt;section id=&quot;explanation&quot; class=&quot;mb-12&quot;&gt;
        &lt;h2 class=&quot;text-2xl font-bold mb-6 flex items-center&quot;&gt;
            &lt;i class=&quot;fa fa-book text-primary mr-2&quot;&gt;&lt;/i&gt;代码解释
        &lt;/h2&gt;
        &lt;div class=&quot;bg-white rounded-xl shadow-md p-6&quot;&gt;
            &lt;div class=&quot;space-y-6&quot;&gt;
                &lt;div&gt;
                    &lt;h3 class=&quot;text-xl font-semibold mb-3 text-primary&quot;&gt;程序功能&lt;/h3&gt;
                    &lt;p class=&quot;text-gray-700&quot;&gt;
                        该程序实现了一个高效计算二维矩阵中子矩阵元素之和的功能。通过预处理构建前缀和矩阵，可以在O(1)时间内回答每个子矩阵和的查询，大大提高了多次查询时的效率。
                    &lt;/p&gt;
                &lt;/div&gt;
                
                &lt;div&gt;
                    &lt;h3 class=&quot;text-xl font-semibold mb-3 text-primary&quot;&gt;核心算法：二维前缀和&lt;/h3&gt;
                    &lt;p class=&quot;text-gray-700 mb-4&quot;&gt;
                        程序使用了二维前缀和算法，其核心思想是预先计算矩阵中每个位置到左上角的矩形区域的元素和，存储在submetricsum数组中。这样，任意子矩阵的和都可以通过前缀和数组中的四个值计算得到。
                    &lt;/p&gt;
                    &lt;div class=&quot;bg-gray-50 p-4 rounded-lg border border-gray-200&quot;&gt;
                        &lt;p class=&quot;font-mono text-sm&quot;&gt;
                            submetricsum[i][j] = 矩阵中从(1,1)到(i,j)的所有元素之和
                        &lt;/p&gt;
                        &lt;p class=&quot;font-mono text-sm mt-2&quot;&gt;
                            计算公式：submetricsum[i][j] = submetricsum[i][j-1] + matrix[i][j] + submetricsum[i-1][j] - submetricsum[i-1][j-1]
                        &lt;/p&gt;
                    &lt;/div&gt;
                &lt;/div&gt;
                
                &lt;div&gt;
                    &lt;h3 class=&quot;text-xl font-semibold mb-3 text-primary&quot;&gt;查询计算&lt;/h3&gt;
                    &lt;p class=&quot;text-gray-700 mb-4&quot;&gt;
                        对于查询从(x,y)开始，大小为a×b的子矩阵和，计算公式为：
                    &lt;/p&gt;
                    &lt;div class=&quot;bg-gray-50 p-4 rounded-lg border border-gray-200&quot;&gt;
                        &lt;p class=&quot;font-mono text-sm&quot;&gt;
                            sum = submetricsum[x+a-1][y+b-1] - submetricsum[x+a-1][y-1] - submetricsum[x-1][y+b-1] + submetricsum[x-1][y-1]
                        &lt;/p&gt;
                    &lt;/div&gt;
                &lt;/div&gt;
                
                &lt;div&gt;
                    &lt;h3 class=&quot;text-xl font-semibold mb-3 text-primary&quot;&gt;数据结构&lt;/h3&gt;
                    &lt;ul class=&quot;list-disc pl-5 text-gray-700 space-y-2&quot;&gt;
                        &lt;li&gt;&lt;span class=&quot;font-medium&quot;&gt;matrix[2001][2001]&lt;/span&gt;：存储原始矩阵数据，使用1-based索引&lt;/li&gt;
                        &lt;li&gt;&lt;span class=&quot;font-medium&quot;&gt;submetricsum[2001][2001]&lt;/span&gt;：存储前缀和矩阵，使用long long类型防止溢出&lt;/li&gt;
                    &lt;/ul&gt;
                &lt;/div&gt;
            &lt;/div&gt;
        &lt;/div&gt;
    &lt;/section&gt;

    &lt;!-- 功能特点 --&gt;
    &lt;section id=&quot;features&quot; class=&quot;mb-12&quot;&gt;
        &lt;h2 class=&quot;text-2xl font-bold mb-6 flex items-center&quot;&gt;
            &lt;i class=&quot;fa fa-list-ul text-primary mr-2&quot;&gt;&lt;/i&gt;功能特点
        &lt;/h2&gt;
        &lt;div class=&quot;grid grid-cols-1 md:grid-cols-2 gap-6&quot;&gt;
            &lt;div class=&quot;bg-white rounded-xl shadow-md p-6 transform hover:-translate-y-1 transition-transform&quot;&gt;
                &lt;div class=&quot;text-primary text-3xl mb-4&quot;&gt;
                    &lt;i class=&quot;fa fa-tachometer&quot;&gt;&lt;/i&gt;
                &lt;/div&gt;
                &lt;h3 class=&quot;text-xl font-semibold mb-2&quot;&gt;高效查询&lt;/h3&gt;
                &lt;p class=&quot;text-gray-600&quot;&gt;
                    通过O(n×m)的预处理，将每个子矩阵和的查询时间降低到O(1)，特别适合需要多次查询的场景。
                &lt;/p&gt;
            &lt;/div&gt;
            
            &lt;div class=&quot;bg-white rounded-xl shadow-md p-6 transform hover:-translate-y-1 transition-transform&quot;&gt;
                &lt;div class=&quot;text-primary text-3xl mb-4&quot;&gt;
                    &lt;i class=&quot;fa fa-shield&quot;&gt;&lt;/i&gt;
                &lt;/div&gt;
                &lt;h3 class=&quot;text-xl font-semibold mb-2&quot;&gt;防止溢出&lt;/h3&gt;
                &lt;p class=&quot;text-gray-600&quot;&gt;
                    使用long long类型存储前缀和，有效防止了大矩阵元素和可能导致的整数溢出问题。
                &lt;/p&gt;
            &lt;/div&gt;
            
            &lt;div class=&quot;bg-white rounded-xl shadow-md p-6 transform hover:-translate-y-1 transition-transform&quot;&gt;
                &lt;div class=&quot;text-primary text-3xl mb-4&quot;&gt;
                    &lt;i class=&quot;fa fa-code-fork&quot;&gt;&lt;/i&gt;
                &lt;/div&gt;
                &lt;h3 class=&quot;text-xl font-semibold mb-2&quot;&gt;清晰的代码结构&lt;/h3&gt;
                &lt;p class=&quot;text-gray-600&quot;&gt;
                    代码逻辑清晰，分为矩阵输入、前缀和计算和查询处理三个主要部分，易于理解和维护。
                &lt;/p&gt;
            &lt;/div&gt;
            
            &lt;div class=&quot;bg-white rounded-xl shadow-md p-6 transform hover:-translate-y-1 transition-transform&quot;&gt;
                &lt;div class=&quot;text-primary text-3xl mb-4&quot;&gt;
                    &lt;i class=&quot;fa fa-expand&quot;&gt;&lt;/i&gt;
                &lt;/div&gt;
                &lt;h3 class=&quot;text-xl font-semibold mb-2&quot;&gt;足够的空间&lt;/h3&gt;
                &lt;p class=&quot;text-gray-600&quot;&gt;
                    矩阵大小设置为2001×2001，可以处理最大2000×2000的输入矩阵，满足大多数场景需求。
                &lt;/p&gt;
            &lt;/div&gt;
        &lt;/div&gt;
    &lt;/section&gt;

    &lt;!-- 运行示例 --&gt;
    &lt;section id=&quot;example&quot; class=&quot;mb-12&quot;&gt;
        &lt;h2 class=&quot;text-2xl font-bold mb-6 flex items-center&quot;&gt;
            &lt;i class=&quot;fa fa-play-circle text-primary mr-2&quot;&gt;&lt;/i&gt;运行示例
        &lt;/h2&gt;
        &lt;div class=&quot;bg-white rounded-xl shadow-md p-6&quot;&gt;
            &lt;div class=&quot;grid grid-cols-1 md:grid-cols-2 gap-6&quot;&gt;
                &lt;div&gt;
                    &lt;h3 class=&quot;text-lg font-semibold mb-3 text-gray-800&quot;&gt;输入示例&lt;/h3&gt;
                    &lt;div class=&quot;bg-gray-100 p-4 rounded-lg font-mono text-sm&quot;&gt;
                        &lt;p&gt;3 3&lt;/p&gt;
                        &lt;p&gt;1 2 3&lt;/p&gt;
                        &lt;p&gt;4 5 6&lt;/p&gt;
                        &lt;p&gt;7 8 9&lt;/p&gt;
                        &lt;p&gt;2&lt;/p&gt;
                        &lt;p&gt;1 1 2 2&lt;/p&gt;
                        &lt;p&gt;2 2 2 2&lt;/p&gt;
                    &lt;/div&gt;
                &lt;/div&gt;
                &lt;div&gt;
                    &lt;h3 class=&quot;text-lg font-semibold mb-3 text-gray-800&quot;&gt;输出示例&lt;/h3&gt;
                    &lt;div class=&quot;bg-gray-100 p-4 rounded-lg font-mono text-sm&quot;&gt;
                        &lt;p&gt;12&lt;/p&gt;
                        &lt;p&gt;28&lt;/p&gt;
                    &lt;/div&gt;
                    &lt;p class=&quot;text-gray-600 mt-3 text-sm&quot;&gt;
                        解释：第一个查询计算(1,1)到(2,2)的子矩阵和：1+2+4+5=12&lt;br&gt;
                        第二个查询计算(2,2)到(3,3)的子矩阵和：5+6+8+9=28
                    &lt;/p&gt;
                &lt;/div&gt;
            &lt;/div&gt;
        &lt;/div&gt;
    &lt;/section&gt;
&lt;/main&gt;

&lt;!-- 页脚 --&gt;
&lt;footer class=&quot;bg-dark text-gray-400 py-8&quot;&gt;
    &lt;div class=&quot;container mx-auto px-4&quot;&gt;
        &lt;div class=&quot;flex flex-col md:flex-row justify-between items-center&quot;&gt;
            &lt;div class=&quot;mb-4 md:mb-0&quot;&gt;
                &lt;div class=&quot;flex items-center&quot;&gt;
                    &lt;i class=&quot;fa fa-code text-primary text-xl mr-2&quot;&gt;&lt;/i&gt;
                    &lt;span class=&quot;font-bold text-white&quot;&gt;C++ 代码展示&lt;/span&gt;
                &lt;/div&gt;
                &lt;p class=&quot;text-sm mt-1&quot;&gt;矩阵子矩阵和计算的实现与解析&lt;/p&gt;
            &lt;/div&gt;
            &lt;div class=&quot;flex space-x-4&quot;&gt;
                &lt;a href=&quot;#&quot; class=&quot;hover:text-primary transition-colors&quot;&gt;&lt;i class=&quot;fa fa-github text-xl&quot;&gt;&lt;/i&gt;&lt;/a&gt;
                &lt;a href=&quot;#&quot; class=&quot;hover:text-primary transition-colors&quot;&gt;&lt;i class=&quot;fa fa-stack-overflow text-xl&quot;&gt;&lt;/i&gt;&lt;/a&gt;
                &lt;a href=&quot;#&quot; class=&quot;hover:text-primary transition-colors&quot;&gt;&lt;i class=&quot;fa fa-linkedin text-xl&quot;&gt;&lt;/i&gt;&lt;/a&gt;
            &lt;/div&gt;
        &lt;/div&gt;
        &lt;div class=&quot;border-t border-gray-700 mt-6 pt-6 text-center text-sm&quot;&gt;
            &amp;copy; 2023 代码展示页面 | 使用 Tailwind CSS 构建
        &lt;/div&gt;
    &lt;/div&gt;
&lt;/footer&gt;

&lt;!-- 复制成功提示 --&gt;
&lt;div id=&quot;copy-toast&quot; class=&quot;fixed bottom-4 right-4 bg-green-500 text-white px-4 py-2 rounded-lg shadow-lg transform translate-y-20 opacity-0 transition-all duration-300 flex items-center&quot;&gt;
    &lt;i class=&quot;fa fa-check mr-2&quot;&gt;&lt;/i&gt;
    &lt;span&gt;代码已复制到剪贴板&lt;/span&gt;
&lt;/div&gt;

&lt;script&gt;
    // 复制代码功能
    document.getElementById(&#39;copy-btn&#39;).addEventListener(&#39;click&#39;, function() &#123;
        // 提取代码文本
        const codeLines = document.querySelectorAll(&#39;#code-content .code-line&#39;);
        let codeText = &#39;&#39;;
        codeLines.forEach(line =&gt; &#123;
            // 移除HTML标签，只保留文本内容
            let text = line.textContent.trim() + &#39;\n&#39;;
            codeText += text;
        &#125;);
        
        // 复制到剪贴板
        navigator.clipboard.writeText(codeText).then(() =&gt; &#123;
            // 显示提示
            const toast = document.getElementById(&#39;copy-toast&#39;);
            toast.classList.remove(&#39;translate-y-20&#39;, &#39;opacity-0&#39;);
            toast.classList.add(&#39;translate-y-0&#39;, &#39;opacity-100&#39;);
            
            // 3秒后隐藏提示
            setTimeout(() =&gt; &#123;
                toast.classList.remove(&#39;translate-y-0&#39;, &#39;opacity-100&#39;);
                toast.classList.add(&#39;translate-y-20&#39;, &#39;opacity-0&#39;);
            &#125;, 3000);
        &#125;);
    &#125;);

    // 平滑滚动
    document.querySelectorAll(&#39;a[href^=&quot;#&quot;]&#39;).forEach(anchor =&gt; &#123;
        anchor.addEventListener(&#39;click&#39;, function (e) &#123;
            e.preventDefault();
            document.querySelector(this.getAttribute(&#39;href&#39;)).scrollIntoView(&#123;
                behavior: &#39;smooth&#39;
            &#125;);
        &#125;);
    &#125;);
&lt;/script&gt;
</code></pre>
</body>
</html>
]]></content>
  </entry>
</search>
