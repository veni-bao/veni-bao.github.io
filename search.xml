<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Hello World</title>
    <url>/2025/03/04/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
  </entry>
  <entry>
    <title>Goal</title>
    <url>/2025/03/05/Goal/</url>
    <content><![CDATA[<h2 id="My-Goals"><a href="#My-Goals" class="headerlink" title="My Goals"></a>My Goals</h2><p>Currently I’m studying in Xv Yong’s group, and learning DFT calculation and machine learning. I hope I can learn more about condensed matter physics and machine learning in the future.</p>
]]></content>
  </entry>
  <entry>
    <title>My First Post</title>
    <url>/2025/03/04/My-First-Post/</url>
    <content><![CDATA[<h2 id="Hi！This-is-my-first-post"><a href="#Hi！This-is-my-first-post" class="headerlink" title="Hi！This is my first post!"></a>Hi！This is my first post!</h2><p>This is my first time to create a blog, and I can’t wait to write more articles in the future. The original goal is to record my learning process, and inspire myself by tracing what I have achieved. Hope I can be better in the future.</p>
<h2 id="For-Visitors"><a href="#For-Visitors" class="headerlink" title="For Visitors"></a>For Visitors</h2><p>Thank you for visiting my blog! Hope you will find my posts interesting and helpful. If you have any questions or suggestions, please feel free to leave a comment or contact me. I look forward to hearing from you!</p>
<h2 id="Very-Important"><a href="#Very-Important" class="headerlink" title="Very Important"></a>Very Important</h2><p>I love shorekeeper.</p>
]]></content>
  </entry>
  <entry>
    <title>Tools</title>
    <url>/2025/03/06/Tools/</url>
    <content><![CDATA[<h2 id="Here-are-some-useful-links-for-post-writing-tricks"><a href="#Here-are-some-useful-links-for-post-writing-tricks" class="headerlink" title="Here are some useful links for post writing tricks"></a>Here are some useful links for post writing tricks</h2><ol>
<li><a href="https://hexo.io/zh-cn/docs/tag-plugins">tags</a> provides grammar for code blocks, citing, quotes, etc.</li>
<li><a href="https://link.hhtjim.com/">hhtjim</a> provides a outside music link for music players.</li>
<li>The format of picture insertion is as follows: <img src="/images/image.png">, and the picture is placed in the ..&#x2F;images folder.</li>
</ol>
]]></content>
  </entry>
  <entry>
    <title>vtuber</title>
    <url>/2025/03/11/vtuber/</url>
    <content><![CDATA[<h2 id="OpenLLM-Vtuber"><a href="#OpenLLM-Vtuber" class="headerlink" title="OpenLLM-Vtuber"></a>OpenLLM-Vtuber</h2><p>I’d like to create an avatar of Shorekeeper using the github Item “OpenLLM-Vtuber”. This blog is to trace my progress.</p>
<h2 id="2025-3-11"><a href="#2025-3-11" class="headerlink" title="2025&#x2F;3&#x2F;11"></a>2025&#x2F;3&#x2F;11</h2><p>I cloned the repository and ran the code. Using my deepseek API from “火山方舟”, I successed in starting basic communication on local server with suiku, the default avatar in the Item. I gave her the prompt of shorekeeper.</p>
<p><img src="/images/image.png"></p>
<p>Future plans:</p>
<ul>
<li><input disabled="" type="checkbox"> Create a new avatar of shorekeeper using Live2D. But it’s quite “Art”, maybe hard for a programmer like me to do it.</li>
<li><input disabled="" type="checkbox"> Replace the default AudioEngine with my own. I think it’s possible, but I need to learn more about the AudioEngine.</li>
<li><input disabled="" type="checkbox"> Use my local deepseek-r1-distill-Qwen-14B to run the avatar. Whether she will be smarter or not remains to be seen.</li>
</ul>
<h2 id="2025-3-14"><a href="#2025-3-14" class="headerlink" title="2025&#x2F;3&#x2F;14"></a>2025&#x2F;3&#x2F;14</h2><p>I found a great AI audio creater <a href="https://gsv.acgnai.top/">GPT-Sovits</a>. I generated an example:</p>
<audio controls>
  <source src="../images/shorekeeper.mp3" type="audio/mpeg">
  Your browser does not support the audio element.
</audio>
]]></content>
  </entry>
  <entry>
    <title>DFT</title>
    <url>/2025/03/11/DFT/</url>
    <content><![CDATA[<h2 id="DFT-learning-note"><a href="#DFT-learning-note" class="headerlink" title="DFT learning note"></a>DFT learning note</h2><p>2025&#x2F;3&#x2F;11<br>Always leave some note when learning. This will be my everyday learning note about DFT.</p>
]]></content>
  </entry>
  <entry>
    <title>HPC</title>
    <url>/2025/03/12/HPC/</url>
    <content><![CDATA[<h2 id="High-Performance-Computing"><a href="#High-Performance-Computing" class="headerlink" title="High Performance Computing"></a>High Performance Computing</h2><h3 id="3-26"><a href="#3-26" class="headerlink" title="3&#x2F;26"></a>3&#x2F;26</h3><p>Ring_Allreduce：define a MPI_Allreduce using Ring arithmetic</p>
<p>The code is as follows:</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;chrono&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;mpi.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;time.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> EPS 1e-5</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> ch = std::chrono;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Ring_Allreduce</span><span class="params">(<span class="type">void</span>* sendbuf, <span class="type">void</span>* recvbuf, <span class="type">int</span> n, MPI_Comm comm, <span class="type">int</span> comm_sz, <span class="type">int</span> my_rank)</span></span></span><br><span class="line"><span class="function"></span>&#123;   </span><br><span class="line">    <span class="type">int</span> chunk = (n + comm_sz - <span class="number">1</span>) / comm_sz;</span><br><span class="line">    <span class="type">int</span> last_chunk = n - (comm_sz<span class="number">-1</span>)*chunk;</span><br><span class="line">    <span class="type">int</span> total_bytes = n * <span class="built_in">sizeof</span>(<span class="type">float</span>);</span><br><span class="line">    <span class="type">float</span>* sendbuf_float = (<span class="type">float</span>*)sendbuf;</span><br><span class="line">    <span class="type">float</span>* recvbuf_float = (<span class="type">float</span>*)recvbuf;</span><br><span class="line">    <span class="type">float</span>* tmpbuf_float = (<span class="type">float</span>*)<span class="built_in">malloc</span>(total_bytes);</span><br><span class="line">    <span class="built_in">memcpy</span>(recvbuf, sendbuf, total_bytes);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; comm_sz - <span class="number">1</span>; ++i)&#123;</span><br><span class="line"></span><br><span class="line">        MPI_Request send_req,recv_req;</span><br><span class="line">        <span class="keyword">if</span> ((my_rank - i + comm_sz) % comm_sz == comm_sz - <span class="number">1</span>)&#123;</span><br><span class="line">            <span class="built_in">MPI_Isend</span>(recvbuf_float + (my_rank - i + comm_sz) % comm_sz *chunk, last_chunk, MPI_FLOAT, (my_rank + <span class="number">1</span>) % comm_sz, <span class="number">0</span>, comm,&amp;send_req);</span><br><span class="line">            <span class="built_in">MPI_Irecv</span>(tmpbuf_float+(my_rank - <span class="number">1</span> +comm_sz - i) % comm_sz *chunk, chunk, MPI_FLOAT, (my_rank - <span class="number">1</span> + comm_sz) % comm_sz, <span class="number">0</span>, comm,&amp;recv_req);</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span> ((my_rank <span class="number">-1</span> + comm_sz - i) % comm_sz == comm_sz <span class="number">-1</span>)&#123;</span><br><span class="line">            <span class="comment">// last_chunk = n - (comm_sz-1)*chunk;</span></span><br><span class="line">            <span class="built_in">MPI_Isend</span>(recvbuf_float + (my_rank - i + comm_sz) % comm_sz *chunk, chunk, MPI_FLOAT, (my_rank + <span class="number">1</span>) % comm_sz, <span class="number">0</span>, comm,&amp;send_req);</span><br><span class="line">            <span class="built_in">MPI_Irecv</span>(tmpbuf_float+(my_rank - <span class="number">1</span> +comm_sz - i) % comm_sz *chunk, last_chunk, MPI_FLOAT, (my_rank - <span class="number">1</span> + comm_sz) % comm_sz, <span class="number">0</span>, comm,&amp;recv_req);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="built_in">MPI_Isend</span>(recvbuf_float + (my_rank - i + comm_sz) % comm_sz *chunk , chunk, MPI_FLOAT, (my_rank + <span class="number">1</span>) % comm_sz, <span class="number">0</span>, comm,&amp;send_req);</span><br><span class="line">            <span class="built_in">MPI_Irecv</span>(tmpbuf_float+(my_rank - <span class="number">1</span> +comm_sz - i) % comm_sz *chunk , chunk, MPI_FLOAT, (my_rank - <span class="number">1</span> + comm_sz) % comm_sz, <span class="number">0</span>, comm,&amp;recv_req);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">MPI_Wait</span>(&amp;send_req, MPI_STATUS_IGNORE);</span><br><span class="line">        <span class="built_in">MPI_Wait</span>(&amp;recv_req, MPI_STATUS_IGNORE);</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> special_chunk = chunk;</span><br><span class="line">        <span class="keyword">if</span> ((my_rank <span class="number">-1</span> + comm_sz - i) % comm_sz == comm_sz <span class="number">-1</span>)&#123;</span><br><span class="line">            special_chunk = last_chunk;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; special_chunk; ++j)&#123;</span><br><span class="line">            recvbuf_float[j+(my_rank - <span class="number">1</span> +comm_sz - i) % comm_sz*chunk] += tmpbuf_float[j + (my_rank - <span class="number">1</span> -i + comm_sz) % comm_sz*chunk];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;  </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; comm_sz<span class="number">-1</span>; ++i)&#123;</span><br><span class="line">        MPI_Request send_req,recv_req;</span><br><span class="line">        <span class="type">int</span> source_chunk = (my_rank + <span class="number">1</span> - i + comm_sz) % comm_sz; </span><br><span class="line">        <span class="type">int</span> dest_chunk = (my_rank - i + comm_sz) % comm_sz;</span><br><span class="line">        <span class="keyword">if</span> (source_chunk == comm_sz - <span class="number">1</span>)&#123;</span><br><span class="line">            <span class="built_in">MPI_Isend</span>(recvbuf_float + source_chunk*chunk, last_chunk, MPI_FLOAT, (my_rank + <span class="number">1</span>) % comm_sz, <span class="number">0</span>, comm,&amp;send_req);</span><br><span class="line">            <span class="built_in">MPI_Irecv</span>(recvbuf_float + dest_chunk*chunk, chunk, MPI_FLOAT, (my_rank - <span class="number">1</span> + comm_sz) % comm_sz, <span class="number">0</span>, comm,&amp;recv_req);</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span> (dest_chunk == comm_sz - <span class="number">1</span>)&#123;</span><br><span class="line">            <span class="built_in">MPI_Isend</span>(recvbuf_float + source_chunk*chunk, chunk, MPI_FLOAT, (my_rank + <span class="number">1</span>) % comm_sz, <span class="number">0</span>, comm,&amp;send_req);</span><br><span class="line">            <span class="built_in">MPI_Irecv</span>(recvbuf_float + dest_chunk*chunk,last_chunk, MPI_FLOAT, (my_rank - <span class="number">1</span> + comm_sz) % comm_sz, <span class="number">0</span>, comm,&amp;recv_req);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="built_in">MPI_Isend</span>(recvbuf_float + source_chunk*chunk, chunk, MPI_FLOAT, (my_rank + <span class="number">1</span>) % comm_sz, <span class="number">0</span>, comm,&amp;send_req);</span><br><span class="line">            <span class="built_in">MPI_Irecv</span>(recvbuf_float + dest_chunk*chunk, chunk, MPI_FLOAT, (my_rank - <span class="number">1</span> + comm_sz) % comm_sz, <span class="number">0</span>, comm,&amp;recv_req);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">MPI_Wait</span>(&amp;send_req, MPI_STATUS_IGNORE);</span><br><span class="line">        <span class="built_in">MPI_Wait</span>(&amp;recv_req, MPI_STATUS_IGNORE);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">free</span>(tmpbuf_float);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// reduce + bcast</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Naive_Allreduce</span><span class="params">(<span class="type">void</span>* sendbuf, <span class="type">void</span>* recvbuf, <span class="type">int</span> n, MPI_Comm comm, <span class="type">int</span> comm_sz, <span class="type">int</span> my_rank)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">MPI_Reduce</span>(sendbuf, recvbuf, n, MPI_FLOAT, MPI_SUM, <span class="number">0</span>, comm);</span><br><span class="line">    <span class="built_in">MPI_Bcast</span>(recvbuf, n, MPI_FLOAT, <span class="number">0</span>, comm);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> ITER = <span class="built_in">atoi</span>(argv[<span class="number">1</span>]);</span><br><span class="line">    <span class="type">int</span> n = <span class="built_in">atoi</span>(argv[<span class="number">2</span>]);</span><br><span class="line">    <span class="type">float</span>* mpi_sendbuf = <span class="keyword">new</span> <span class="type">float</span>[n];</span><br><span class="line">    <span class="type">float</span>* mpi_recvbuf = <span class="keyword">new</span> <span class="type">float</span>[n];</span><br><span class="line">    <span class="type">float</span>* naive_sendbuf = <span class="keyword">new</span> <span class="type">float</span>[n];</span><br><span class="line">    <span class="type">float</span>* naive_recvbuf = <span class="keyword">new</span> <span class="type">float</span>[n];</span><br><span class="line">    <span class="type">float</span>* ring_sendbuf = <span class="keyword">new</span> <span class="type">float</span>[n];</span><br><span class="line">    <span class="type">float</span>* ring_recvbuf = <span class="keyword">new</span> <span class="type">float</span>[n];</span><br><span class="line"></span><br><span class="line">    <span class="built_in">MPI_Init</span>(<span class="literal">nullptr</span>, <span class="literal">nullptr</span>);</span><br><span class="line">    <span class="type">int</span> comm_sz;</span><br><span class="line">    <span class="type">int</span> my_rank;</span><br><span class="line">    <span class="built_in">MPI_Comm_size</span>(MPI_COMM_WORLD, &amp;comm_sz);</span><br><span class="line">    <span class="built_in">MPI_Comm_rank</span>(MPI_COMM_WORLD, &amp;my_rank);</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">srand</span>(<span class="built_in">time</span>(<span class="literal">NULL</span>) + my_rank);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; ++i)</span><br><span class="line">        mpi_sendbuf[i] = <span class="keyword">static_cast</span> &lt;<span class="type">float</span>&gt; (<span class="built_in">rand</span>()) / <span class="keyword">static_cast</span> &lt;<span class="type">float</span>&gt; (RAND_MAX);</span><br><span class="line">    <span class="built_in">memcpy</span>(naive_sendbuf, mpi_sendbuf, n * <span class="built_in">sizeof</span>(<span class="type">float</span>));</span><br><span class="line">    <span class="built_in">memcpy</span>(ring_sendbuf, mpi_sendbuf, n * <span class="built_in">sizeof</span>(<span class="type">float</span>));</span><br><span class="line"></span><br><span class="line">    <span class="comment">//warmup and check</span></span><br><span class="line">    <span class="built_in">MPI_Allreduce</span>(mpi_sendbuf, mpi_recvbuf, n, MPI_FLOAT, MPI_SUM, MPI_COMM_WORLD);</span><br><span class="line">    <span class="built_in">Naive_Allreduce</span>(naive_sendbuf, naive_recvbuf, n, MPI_COMM_WORLD, comm_sz, my_rank);</span><br><span class="line">    <span class="built_in">Ring_Allreduce</span>(ring_sendbuf, ring_recvbuf, n, MPI_COMM_WORLD, comm_sz, my_rank);</span><br><span class="line">    <span class="type">bool</span> correct = <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; ++i)</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">abs</span>(mpi_recvbuf[i] - ring_recvbuf[i]) &gt; EPS)</span><br><span class="line">        &#123;   </span><br><span class="line">            correct = <span class="literal">false</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (correct)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">auto</span> beg = ch::high_resolution_clock::<span class="built_in">now</span>();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> iter = <span class="number">0</span>; iter &lt; ITER; ++iter)</span><br><span class="line">            <span class="built_in">MPI_Allreduce</span>(mpi_sendbuf, mpi_recvbuf, n, MPI_FLOAT, MPI_SUM, MPI_COMM_WORLD);</span><br><span class="line">        <span class="keyword">auto</span> end = ch::high_resolution_clock::<span class="built_in">now</span>();</span><br><span class="line">        <span class="type">double</span> mpi_dur = ch::duration_cast&lt;ch::duration&lt;<span class="type">double</span>&gt;&gt;(end - beg).<span class="built_in">count</span>() * <span class="number">1000</span>; <span class="comment">//ms</span></span><br><span class="line"></span><br><span class="line">        beg = ch::high_resolution_clock::<span class="built_in">now</span>();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> iter = <span class="number">0</span>; iter &lt; ITER; ++iter)</span><br><span class="line">            <span class="built_in">Naive_Allreduce</span>(naive_sendbuf, naive_recvbuf, n, MPI_COMM_WORLD, comm_sz, my_rank);</span><br><span class="line">        end = ch::high_resolution_clock::<span class="built_in">now</span>();</span><br><span class="line">        <span class="type">double</span> naive_dur = ch::duration_cast&lt;ch::duration&lt;<span class="type">double</span>&gt;&gt;(end - beg).<span class="built_in">count</span>() * <span class="number">1000</span>; <span class="comment">//ms</span></span><br><span class="line"></span><br><span class="line">        beg = ch::high_resolution_clock::<span class="built_in">now</span>();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> iter = <span class="number">0</span>; iter &lt; ITER; ++iter)</span><br><span class="line">            <span class="built_in">Ring_Allreduce</span>(ring_sendbuf, ring_recvbuf, n, MPI_COMM_WORLD, comm_sz, my_rank);</span><br><span class="line">        end = ch::high_resolution_clock::<span class="built_in">now</span>();</span><br><span class="line">        <span class="type">double</span> ring_dur = ch::duration_cast&lt;ch::duration&lt;<span class="type">double</span>&gt;&gt;(end - beg).<span class="built_in">count</span>() * <span class="number">1000</span>; <span class="comment">//ms</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (my_rank == <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            std::cout &lt;&lt; <span class="string">&quot;Correct.&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">            std::cout &lt;&lt; <span class="string">&quot;MPI_Allreduce:   &quot;</span> &lt;&lt; mpi_dur &lt;&lt; <span class="string">&quot; ms.&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">            std::cout &lt;&lt; <span class="string">&quot;Naive_Allreduce: &quot;</span> &lt;&lt; naive_dur &lt;&lt; <span class="string">&quot; ms.&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">            std::cout &lt;&lt; <span class="string">&quot;Ring_Allreduce:  &quot;</span> &lt;&lt; ring_dur &lt;&lt; <span class="string">&quot; ms.&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">if</span> (my_rank == <span class="number">0</span>)</span><br><span class="line">            std::cout &lt;&lt; <span class="string">&quot;Wrong!&quot;</span> &lt;&lt; std::endl;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">delete</span>[] mpi_sendbuf;</span><br><span class="line">    <span class="keyword">delete</span>[] mpi_recvbuf;</span><br><span class="line">    <span class="keyword">delete</span>[] naive_sendbuf;</span><br><span class="line">    <span class="keyword">delete</span>[] naive_recvbuf;</span><br><span class="line">    <span class="keyword">delete</span>[] ring_sendbuf;</span><br><span class="line">    <span class="keyword">delete</span>[] ring_recvbuf;</span><br><span class="line">    <span class="built_in">MPI_Finalize</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
  </entry>
</search>
